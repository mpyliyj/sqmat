# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_tpsa', [dirname(__file__)])
        except ImportError:
            import _tpsa
            return _tpsa
        if fp is not None:
            try:
                _mod = imp.load_module('_tpsa', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _tpsa = swig_import_helper()
    del swig_import_helper
else:
    import _tpsa
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _tpsa.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self): return _tpsa.SwigPyIterator_value(self)
    def incr(self, n=1): return _tpsa.SwigPyIterator_incr(self, n)
    def decr(self, n=1): return _tpsa.SwigPyIterator_decr(self, n)
    def distance(self, *args): return _tpsa.SwigPyIterator_distance(self, *args)
    def equal(self, *args): return _tpsa.SwigPyIterator_equal(self, *args)
    def copy(self): return _tpsa.SwigPyIterator_copy(self)
    def next(self): return _tpsa.SwigPyIterator_next(self)
    def __next__(self): return _tpsa.SwigPyIterator___next__(self)
    def previous(self): return _tpsa.SwigPyIterator_previous(self)
    def advance(self, *args): return _tpsa.SwigPyIterator_advance(self, *args)
    def __eq__(self, *args): return _tpsa.SwigPyIterator___eq__(self, *args)
    def __ne__(self, *args): return _tpsa.SwigPyIterator___ne__(self, *args)
    def __iadd__(self, *args): return _tpsa.SwigPyIterator___iadd__(self, *args)
    def __isub__(self, *args): return _tpsa.SwigPyIterator___isub__(self, *args)
    def __add__(self, *args): return _tpsa.SwigPyIterator___add__(self, *args)
    def __sub__(self, *args): return _tpsa.SwigPyIterator___sub__(self, *args)
    def __iter__(self): return self
SwigPyIterator_swigregister = _tpsa.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class DoubleVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DoubleVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DoubleVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _tpsa.DoubleVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _tpsa.DoubleVector___nonzero__(self)
    def __bool__(self): return _tpsa.DoubleVector___bool__(self)
    def __len__(self): return _tpsa.DoubleVector___len__(self)
    def pop(self): return _tpsa.DoubleVector_pop(self)
    def __getslice__(self, *args): return _tpsa.DoubleVector___getslice__(self, *args)
    def __setslice__(self, *args): return _tpsa.DoubleVector___setslice__(self, *args)
    def __delslice__(self, *args): return _tpsa.DoubleVector___delslice__(self, *args)
    def __delitem__(self, *args): return _tpsa.DoubleVector___delitem__(self, *args)
    def __getitem__(self, *args): return _tpsa.DoubleVector___getitem__(self, *args)
    def __setitem__(self, *args): return _tpsa.DoubleVector___setitem__(self, *args)
    def append(self, *args): return _tpsa.DoubleVector_append(self, *args)
    def empty(self): return _tpsa.DoubleVector_empty(self)
    def size(self): return _tpsa.DoubleVector_size(self)
    def clear(self): return _tpsa.DoubleVector_clear(self)
    def swap(self, *args): return _tpsa.DoubleVector_swap(self, *args)
    def get_allocator(self): return _tpsa.DoubleVector_get_allocator(self)
    def begin(self): return _tpsa.DoubleVector_begin(self)
    def end(self): return _tpsa.DoubleVector_end(self)
    def rbegin(self): return _tpsa.DoubleVector_rbegin(self)
    def rend(self): return _tpsa.DoubleVector_rend(self)
    def pop_back(self): return _tpsa.DoubleVector_pop_back(self)
    def erase(self, *args): return _tpsa.DoubleVector_erase(self, *args)
    def __init__(self, *args): 
        this = _tpsa.new_DoubleVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _tpsa.DoubleVector_push_back(self, *args)
    def front(self): return _tpsa.DoubleVector_front(self)
    def back(self): return _tpsa.DoubleVector_back(self)
    def assign(self, *args): return _tpsa.DoubleVector_assign(self, *args)
    def resize(self, *args): return _tpsa.DoubleVector_resize(self, *args)
    def insert(self, *args): return _tpsa.DoubleVector_insert(self, *args)
    def reserve(self, *args): return _tpsa.DoubleVector_reserve(self, *args)
    def capacity(self): return _tpsa.DoubleVector_capacity(self)
    __swig_destroy__ = _tpsa.delete_DoubleVector
    __del__ = lambda self : None;
DoubleVector_swigregister = _tpsa.DoubleVector_swigregister
DoubleVector_swigregister(DoubleVector)

class IntVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _tpsa.IntVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _tpsa.IntVector___nonzero__(self)
    def __bool__(self): return _tpsa.IntVector___bool__(self)
    def __len__(self): return _tpsa.IntVector___len__(self)
    def pop(self): return _tpsa.IntVector_pop(self)
    def __getslice__(self, *args): return _tpsa.IntVector___getslice__(self, *args)
    def __setslice__(self, *args): return _tpsa.IntVector___setslice__(self, *args)
    def __delslice__(self, *args): return _tpsa.IntVector___delslice__(self, *args)
    def __delitem__(self, *args): return _tpsa.IntVector___delitem__(self, *args)
    def __getitem__(self, *args): return _tpsa.IntVector___getitem__(self, *args)
    def __setitem__(self, *args): return _tpsa.IntVector___setitem__(self, *args)
    def append(self, *args): return _tpsa.IntVector_append(self, *args)
    def empty(self): return _tpsa.IntVector_empty(self)
    def size(self): return _tpsa.IntVector_size(self)
    def clear(self): return _tpsa.IntVector_clear(self)
    def swap(self, *args): return _tpsa.IntVector_swap(self, *args)
    def get_allocator(self): return _tpsa.IntVector_get_allocator(self)
    def begin(self): return _tpsa.IntVector_begin(self)
    def end(self): return _tpsa.IntVector_end(self)
    def rbegin(self): return _tpsa.IntVector_rbegin(self)
    def rend(self): return _tpsa.IntVector_rend(self)
    def pop_back(self): return _tpsa.IntVector_pop_back(self)
    def erase(self, *args): return _tpsa.IntVector_erase(self, *args)
    def __init__(self, *args): 
        this = _tpsa.new_IntVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _tpsa.IntVector_push_back(self, *args)
    def front(self): return _tpsa.IntVector_front(self)
    def back(self): return _tpsa.IntVector_back(self)
    def assign(self, *args): return _tpsa.IntVector_assign(self, *args)
    def resize(self, *args): return _tpsa.IntVector_resize(self, *args)
    def insert(self, *args): return _tpsa.IntVector_insert(self, *args)
    def reserve(self, *args): return _tpsa.IntVector_reserve(self, *args)
    def capacity(self): return _tpsa.IntVector_capacity(self)
    __swig_destroy__ = _tpsa.delete_IntVector
    __del__ = lambda self : None;
IntVector_swigregister = _tpsa.IntVector_swigregister
IntVector_swigregister(IntVector)

class CPolyMap(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CPolyMap, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CPolyMap, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _tpsa.new_CPolyMap(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["map"] = _tpsa.CPolyMap_map_set
    __swig_getmethods__["map"] = _tpsa.CPolyMap_map_get
    if _newclass:map = _swig_property(_tpsa.CPolyMap_map_get, _tpsa.CPolyMap_map_set)
    def getindexmap(self, *args): return _tpsa.CPolyMap_getindexmap(self, *args)
    def setindexmap(self, *args): return _tpsa.CPolyMap_setindexmap(self, *args)
    __swig_destroy__ = _tpsa.delete_CPolyMap
    __del__ = lambda self : None;
CPolyMap_swigregister = _tpsa.CPolyMap_swigregister
CPolyMap_swigregister(CPolyMap)

class CTPS(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CTPS, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CTPS, name)
    __swig_setmethods__["Maximum_TPS_Degree"] = _tpsa.CTPS_Maximum_TPS_Degree_set
    __swig_getmethods__["Maximum_TPS_Degree"] = _tpsa.CTPS_Maximum_TPS_Degree_get
    if _newclass:Maximum_TPS_Degree = _swig_property(_tpsa.CTPS_Maximum_TPS_Degree_get, _tpsa.CTPS_Maximum_TPS_Degree_set)
    __swig_setmethods__["TPS_Dim"] = _tpsa.CTPS_TPS_Dim_set
    __swig_getmethods__["TPS_Dim"] = _tpsa.CTPS_TPS_Dim_get
    if _newclass:TPS_Dim = _swig_property(_tpsa.CTPS_TPS_Dim_get, _tpsa.CTPS_TPS_Dim_set)
    __swig_setmethods__["polymap"] = _tpsa.CTPS_polymap_set
    __swig_getmethods__["polymap"] = _tpsa.CTPS_polymap_get
    if _newclass:polymap = _swig_property(_tpsa.CTPS_polymap_get, _tpsa.CTPS_polymap_set)
    __swig_getmethods__["set_dim"] = lambda x: _tpsa.CTPS_set_dim
    if _newclass:set_dim = staticmethod(_tpsa.CTPS_set_dim)
    def findindex(self, *args): return _tpsa.CTPS_findindex(self, *args)
    def findorder(self, *args): return _tpsa.CTPS_findorder(self, *args)
    __swig_getmethods__["set_max_degree"] = lambda x: _tpsa.CTPS_set_max_degree
    if _newclass:set_max_degree = staticmethod(_tpsa.CTPS_set_max_degree)
    def __init__(self, *args): 
        this = _tpsa.new_CTPS(*args)
        try: self.this.append(this)
        except: self.this = this
    def assign(self, *args): return _tpsa.CTPS_assign(self, *args)
    def redegree(self, *args): return _tpsa.CTPS_redegree(self, *args)
    def get_dim(self): return _tpsa.CTPS_get_dim(self)
    def get_degree(self): return _tpsa.CTPS_get_degree(self)
    def get_terms(self): return _tpsa.CTPS_get_terms(self)
    def element(self, *args): return _tpsa.CTPS_element(self, *args)
    def get_terms_by_degree(self): return _tpsa.CTPS_get_terms_by_degree(self)
    def get_map(self): return _tpsa.CTPS_get_map(self)
    def evaluate(self, *args): return _tpsa.CTPS_evaluate(self, *args)
    def derivative(self, *args): return _tpsa.CTPS_derivative(self, *args)
    def __iadd__(self, *args): return _tpsa.CTPS___iadd__(self, *args)
    def __isub__(self, *args): return _tpsa.CTPS___isub__(self, *args)
    def __imul__(self, *args): return _tpsa.CTPS___imul__(self, *args)
    def __idiv__(self, *args): return _tpsa.CTPS___idiv__(self, *args)
    def cst(self): return _tpsa.CTPS_cst(self)
    def __add__(self, *args): return _tpsa.CTPS___add__(self, *args)
    def __sub__(self, *args): return _tpsa.CTPS___sub__(self, *args)
    def __neg__(self): return _tpsa.CTPS___neg__(self)
    def __pos__(self): return _tpsa.CTPS___pos__(self)
    def __div__(self, *args): return _tpsa.CTPS___div__(self, *args)
    def __mul__(self, *args): return _tpsa.CTPS___mul__(self, *args)
    def __eq__(self, *args): return _tpsa.CTPS___eq__(self, *args)
    def __ne__(self, *args): return _tpsa.CTPS___ne__(self, *args)
    def __ge__(self, *args): return _tpsa.CTPS___ge__(self, *args)
    def __le__(self, *args): return _tpsa.CTPS___le__(self, *args)
    def __gt__(self, *args): return _tpsa.CTPS___gt__(self, *args)
    def __lt__(self, *args): return _tpsa.CTPS___lt__(self, *args)
    def __radd__(self, *args): return _tpsa.CTPS___radd__(self, *args)
    def __rsub__(self, *args): return _tpsa.CTPS___rsub__(self, *args)
    def __rmul__(self, *args): return _tpsa.CTPS___rmul__(self, *args)
    def __rdiv__(self, *args): return _tpsa.CTPS___rdiv__(self, *args)
    def __repr__(self): return _tpsa.CTPS___repr__(self)
    __swig_destroy__ = _tpsa.delete_CTPS
    __del__ = lambda self : None;
CTPS_swigregister = _tpsa.CTPS_swigregister
CTPS_swigregister(CTPS)
cvar = _tpsa.cvar

def CTPS_set_dim(*args):
  return _tpsa.CTPS_set_dim(*args)
CTPS_set_dim = _tpsa.CTPS_set_dim

def CTPS_set_max_degree(*args):
  return _tpsa.CTPS_set_max_degree(*args)
CTPS_set_max_degree = _tpsa.CTPS_set_max_degree

def inv(*args):
  return _tpsa.inv(*args)
inv = _tpsa.inv

def exp(*args):
  return _tpsa.exp(*args)
exp = _tpsa.exp

def log(*args):
  return _tpsa.log(*args)
log = _tpsa.log

def sqrt(*args):
  return _tpsa.sqrt(*args)
sqrt = _tpsa.sqrt

def pow(*args):
  return _tpsa.pow(*args)
pow = _tpsa.pow

def sin(*args):
  return _tpsa.sin(*args)
sin = _tpsa.sin

def cos(*args):
  return _tpsa.cos(*args)
cos = _tpsa.cos

def tan(*args):
  return _tpsa.tan(*args)
tan = _tpsa.tan

def arcsin(*args):
  return _tpsa.arcsin(*args)
arcsin = _tpsa.arcsin

def arccos(*args):
  return _tpsa.arccos(*args)
arccos = _tpsa.arccos

def arctan(*args):
  return _tpsa.arctan(*args)
arctan = _tpsa.arctan

def sinh(*args):
  return _tpsa.sinh(*args)
sinh = _tpsa.sinh

def cosh(*args):
  return _tpsa.cosh(*args)
cosh = _tpsa.cosh

# This file is compatible with both classic and new-style classes.


